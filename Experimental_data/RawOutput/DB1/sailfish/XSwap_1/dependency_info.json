{
    "XSwap_1.sol": [
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 70\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 71\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 75\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).supply(_input,_inputAmount)\nIRS: \nTMP_94(uint256) = HIGH_LEVEL_CALL, dest:TMP_93(ILendFMe), function:supply, arguments:['_input', '_inputAmount']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 78\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).supply(chai,IERC20Token(chai).balanceOf(address(this)))\nIRS: \nTMP_92(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(ILendFMe), function:supply, arguments:['chai', 'TMP_91']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 70\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 71\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 70\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 71\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 103\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 104\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 108\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).supply(_input,_inputAmount)\nIRS: \nTMP_94(uint256) = HIGH_LEVEL_CALL, dest:TMP_93(ILendFMe), function:supply, arguments:['_input', '_inputAmount']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 111\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).supply(chai,IERC20Token(chai).balanceOf(address(this)))\nIRS: \nTMP_92(uint256) = HIGH_LEVEL_CALL, dest:TMP_88(ILendFMe), function:supply, arguments:['chai', 'TMP_91']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 103\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 104\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        },
        {
            "attack_type": "DAO",
            "composed_functions": [
                "trade",
                "active"
            ],
            "from_function": "active",
            "to_function": "trade",
            "dependencies": [
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 103\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(chai,_amountToUser)\nIRS: \nTMP_103(uint256) = HIGH_LEVEL_CALL, dest:TMP_102(ILendFMe), function:withdraw, arguments:['chai', '_amountToUser']  \""
                    ],
                    "state_variable": "lendFMe"
                },
                {
                    "path": [
                        "\"BlockID: 55\nFunction: active\nNode: \nEXPRESSION lendFMe = _lendFMe\nIRS: \nlendFMe := _lendFMe\"",
                        "\"BlockID: 104\nFunction: trade\nNode: \nEXPRESSION ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser))\nIRS: \nTMP_109(uint256) = HIGH_LEVEL_CALL, dest:TMP_107(ILendFMe), function:withdraw, arguments:['_output', 'TMP_108']  \""
                    ],
                    "state_variable": "lendFMe"
                }
            ]
        }
    ]
}