{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 8,
            "contract": "PrimitiveEngine",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "line": 1789,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "ABDKMath64x64",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f640aab115c38f0e33ef990d67c9364648ed62e381cd5e5968ebedf8c8db94b464736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "Margin",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b33069401069cea4633f0edb752fd05e1ed078c2830103cbdd511062ca9f90e464736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "ReplicationMath",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212204afe7a4cca3f209cc55b986a774690fd6968a075676675b3731933838108432964736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "Reserve",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205a405c44ba6c5e4be64cdab3335d58851fee3a66b32342032404cdf0196c895b64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "SafeCast",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ab56a80bf6a482c4e1d3c4ab58dd3a82c51be6a7ac63deb0a0a775414cca060f64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "Transfers",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ab9488d756820a3b4517ac115d22f0ae348e86f5696617eee25eb03494b25c2d64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "Units",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220857bcfc266211e3bbc6f8a40dfd1f46b07cf2464ef0ccf811396430de7d181be64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 14,
            "contract": "CumulativeNormalDistribution",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6106b661004e600b8282823980515f1a607314610042577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061017c575f3560e01c80638f02fac9116100e7578063c6ca550c116100a0578063cdb591911161007a578063cdb59191146103f6578063edc829ab14610414578063f738c74e14610432578063f8674ddd146104505761017c565b8063c6ca550c1461039c578063c8daa924146103ba578063ccb4d480146103d85761017c565b80638f02fac9146102e8578063ac0c039f14610306578063ac5718fb14610324578063b1f891e914610342578063ba98ba8414610360578063bd2aedb31461037e5761017c565b8063560140631161013957806356014063146102345780635f839f83146102525780635ffcb26b146102705780636934cdbe1461028e57806373ee9cd7146102ac5780638b30ff83146102ca5761017c565b80630f354d16146101805780631a21ab461461019e5780631f3ca392146101bc5780631fc2044c146101da57806347deec2d146101f85780634900b41714610216575b5f80fd5b61018861046e565b6040516101959190610667565b60405180910390f35b6101a6610492565b6040516101b39190610667565b60405180910390f35b6101c461049e565b6040516101d19190610667565b60405180910390f35b6101e26104ab565b6040516101ef9190610667565b60405180910390f35b6102006104cf565b60405161020d9190610667565b60405180910390f35b61021e6104db565b60405161022b9190610667565b60405180910390f35b61023c6104e7565b6040516102499190610667565b60405180910390f35b61025a61050b565b6040516102679190610667565b60405180910390f35b610278610517565b6040516102859190610667565b60405180910390f35b610296610523565b6040516102a39190610667565b60405180910390f35b6102b4610530565b6040516102c19190610667565b60405180910390f35b6102d2610554565b6040516102df9190610667565b60405180910390f35b6102f0610561565b6040516102fd9190610667565b60405180910390f35b61030e61056e565b60405161031b9190610667565b60405180910390f35b61032c61057a565b6040516103399190610667565b60405180910390f35b61034a61059e565b6040516103579190610667565b60405180910390f35b6103686105aa565b6040516103759190610667565b60405180910390f35b6103866105b6565b6040516103939190610667565b60405180910390f35b6103a46105c3565b6040516103b19190610667565b60405180910390f35b6103c26105d0565b6040516103cf9190610667565b60405180910390f35b6103e06105dd565b6040516103ed9190610667565b60405180910390f35b6103fe610601565b60405161040b9190610667565b60405180910390f35b61041c610625565b6040516104299190610667565b60405180910390f35b61043a610632565b6040516104479190610667565b60405180910390f35b61045861063f565b6040516104659190610667565b60405180910390f35b7ffffffffffffffffffffffffffffffffffffffffffffffffd34dbb82c92aec25281565b67800000000000000081565b6810e56d75ce8bce9fae81565b7ffffffffffffffffffffffffffffffffffffffffffffffff744bdd96ad429612181565b6753dd02a4f5ee2e4681565b67f99999999999999981565b7fffffffffffffffffffffffffffffffffffffffffffffffff3d40a28b38db1ac181565b6721d0a04b0e9b94f181565b6726a8f3c1f21b336e81565b68015d71f5721242c78781565b7ffffffffffffffffffffffffffffffffffffffffffffffffefff409d805e77bef81565b68016a09e667f3bcc90881565b6802000000000000000081565b67066666666666666681565b7fffffffffffffffffffffffffffffffffffffffffffffffffb72b38cf0fae5a0281565b67413c831bb169f87481565b6707a1e70f720eca4381565b6801000000000000000081565b6808c27b4617f5f800ea81565b6810aeac93f55267a9a581565b7ffffffffffffffffffffffffffffffffffffffffffffffffe8bfe3a8feb3c70ec81565b7fffffffffffffffffffffffffffffffffffffffffffffffff783a81a258f2c37081565b68010fb844255a12d72e81565b68072c7d592d021fb1db81565b68041ed34a256149023681565b5f81600f0b9050919050565b6106618161064c565b82525050565b5f60208201905061067a5f830184610658565b9291505056fea2646970667358221220f6d8313fd7112b1e76eaff87411453c2f358d04e6711e8fa1fc03e7f55a8877964736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/PrimitiveEngine_7.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
