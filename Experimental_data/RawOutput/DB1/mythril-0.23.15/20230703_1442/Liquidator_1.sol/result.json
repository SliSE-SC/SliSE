{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Strings",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203a665cbc32df28be2801538c3a8669e5f44dbca0b7bfb056642404e5bf0d858864736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/Liquidator_1.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 12,
            "contract": "TransferHelper",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212209ddf6c4edb29617b224768eca8abfb962a776a7d11621b81eb01beb91260cf0c64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "all_contract/Liquidator_1.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 13,
            "contract": "liquidator",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801562000010575f80fd5b50620000345f801b620000286200003a60201b60201c565b6200004160201b60201c565b620001a5565b5f33905090565b6200005382826200005760201b60201c565b5050565b6200006982826200014260201b60201c565b6200013e5760015f808481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620000e36200003a60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b61160e80620001b35f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c8063485cc95511610064578063485cc9551461012d57806363453ae11461014957806391d1485414610165578063a217fddf14610195578063d547741f146101b357610091565b806301ffc9a714610095578063248a9ca3146100c55780632f2ff15d146100f557806336568abe14610111575b5f80fd5b6100af60048036038101906100aa9190610cfb565b6101cf565b6040516100bc9190610d40565b60405180910390f35b6100df60048036038101906100da9190610d8c565b610248565b6040516100ec9190610dc6565b60405180910390f35b61010f600480360381019061010a9190610e39565b610264565b005b61012b60048036038101906101269190610e39565b61028d565b005b61014760048036038101906101429190610e77565b610310565b005b610163600480360381019061015e9190610eb5565b6103e6565b005b61017f600480360381019061017a9190610e39565b6105eb565b60405161018c9190610d40565b60405180910390f35b61019d61064e565b6040516101aa9190610dc6565b60405180910390f35b6101cd60048036038101906101c89190610e39565b610654565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061024157506102408261067d565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61026d82610248565b61027e816102796106e6565b6106ed565b6102888383610789565b505050565b6102956106e6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f990610f60565b60405180910390fd5b61030c8282610863565b5050565b6103235f801b61031e6106e6565b6105eb565b610362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035990610fc8565b60405180910390fd5b8160015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6103f95f801b6103f46106e6565b6105eb565b610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610fc8565b60405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a439058360025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016104b6929190610ff5565b602060405180830381865afa1580156104d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f59190611030565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c906110cb565b60405180910390fd5b6105e782828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105a391906110e9565b602060405180830381865afa1580156105be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e29190611135565b61093d565b5050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b61065d82610248565b61066e816106696106e6565b6106ed565b6106788383610863565b505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f33905090565b6106f782826105eb565b6107855761071c8173ffffffffffffffffffffffffffffffffffffffff166014610a6d565b610729835f1c6020610a6d565b60405160200161073a929190611260565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c91906112e1565b60405180910390fd5b5050565b61079382826105eb565b61085f5760015f808481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506108046106e6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61086d82826105eb565b15610939575f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506108de6106e6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b5f808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161096e929190611310565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109bc919061137b565b5f604051808303815f865af19150503d805f81146109f5576040519150601f19603f3d011682016040523d82523d5f602084013e6109fa565b606091505b5091509150818015610a2757505f81511480610a26575080806020019051810190610a2591906113bb565b5b5b610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d90611430565b60405180910390fd5b5050505050565b60605f6002836002610a7f919061147b565b610a8991906114bc565b67ffffffffffffffff811115610aa257610aa16114ef565b5b6040519080825280601f01601f191660200182016040528015610ad45781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110610b0b57610b0a61151c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610b6e57610b6d61151c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001846002610bac919061147b565b610bb691906114bc565b90505b6001811115610c55577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610bf857610bf761151c565b5b1a60f81b828281518110610c0f57610c0e61151c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600485901c945080610c4e90611549565b9050610bb9565b505f8414610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f906115ba565b60405180910390fd5b8091505092915050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610cda81610ca6565b8114610ce4575f80fd5b50565b5f81359050610cf581610cd1565b92915050565b5f60208284031215610d1057610d0f610ca2565b5b5f610d1d84828501610ce7565b91505092915050565b5f8115159050919050565b610d3a81610d26565b82525050565b5f602082019050610d535f830184610d31565b92915050565b5f819050919050565b610d6b81610d59565b8114610d75575f80fd5b50565b5f81359050610d8681610d62565b92915050565b5f60208284031215610da157610da0610ca2565b5b5f610dae84828501610d78565b91505092915050565b610dc081610d59565b82525050565b5f602082019050610dd95f830184610db7565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e0882610ddf565b9050919050565b610e1881610dfe565b8114610e22575f80fd5b50565b5f81359050610e3381610e0f565b92915050565b5f8060408385031215610e4f57610e4e610ca2565b5b5f610e5c85828601610d78565b9250506020610e6d85828601610e25565b9150509250929050565b5f8060408385031215610e8d57610e8c610ca2565b5b5f610e9a85828601610e25565b9250506020610eab85828601610e25565b9150509250929050565b5f60208284031215610eca57610ec9610ca2565b5b5f610ed784828501610e25565b91505092915050565b5f82825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e63655f8201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b5f610f4a602f83610ee0565b9150610f5582610ef0565b604082019050919050565b5f6020820190508181035f830152610f7781610f3e565b9050919050565b7f49410000000000000000000000000000000000000000000000000000000000005f82015250565b5f610fb2600283610ee0565b9150610fbd82610f7e565b602082019050919050565b5f6020820190508181035f830152610fdf81610fa6565b9050919050565b610fef81610dfe565b82525050565b5f6040820190506110085f830185610fe6565b6110156020830184610fe6565b9392505050565b5f8151905061102a81610e0f565b92915050565b5f6020828403121561104557611044610ca2565b5b5f6110528482850161101c565b91505092915050565b7f5661756c743a204c69717569646174696e672070616972206e6f7420737570705f8201527f6f72746564000000000000000000000000000000000000000000000000000000602082015250565b5f6110b5602583610ee0565b91506110c08261105b565b604082019050919050565b5f6020820190508181035f8301526110e2816110a9565b9050919050565b5f6020820190506110fc5f830184610fe6565b92915050565b5f819050919050565b61111481611102565b811461111e575f80fd5b50565b5f8151905061112f8161110b565b92915050565b5f6020828403121561114a57611149610ca2565b5b5f61115784828501611121565b91505092915050565b5f81905092915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000005f82015250565b5f61119e601783611160565b91506111a98261116a565b601782019050919050565b5f81519050919050565b5f5b838110156111db5780820151818401526020810190506111c0565b5f8484015250505050565b5f6111f0826111b4565b6111fa8185611160565b935061120a8185602086016111be565b80840191505092915050565b7f206973206d697373696e6720726f6c65200000000000000000000000000000005f82015250565b5f61124a601183611160565b915061125582611216565b601182019050919050565b5f61126a82611192565b915061127682856111e6565b91506112818261123e565b915061128d82846111e6565b91508190509392505050565b5f601f19601f8301169050919050565b5f6112b3826111b4565b6112bd8185610ee0565b93506112cd8185602086016111be565b6112d681611299565b840191505092915050565b5f6020820190508181035f8301526112f981846112a9565b905092915050565b61130a81611102565b82525050565b5f6040820190506113235f830185610fe6565b6113306020830184611301565b9392505050565b5f81519050919050565b5f81905092915050565b5f61135582611337565b61135f8185611341565b935061136f8185602086016111be565b80840191505092915050565b5f611386828461134b565b915081905092915050565b61139a81610d26565b81146113a4575f80fd5b50565b5f815190506113b581611391565b92915050565b5f602082840312156113d0576113cf610ca2565b5b5f6113dd848285016113a7565b91505092915050565b7f54460000000000000000000000000000000000000000000000000000000000005f82015250565b5f61141a600283610ee0565b9150611425826113e6565b602082019050919050565b5f6020820190508181035f8301526114478161140e565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61148582611102565b915061149083611102565b925082820261149e81611102565b915082820484148315176114b5576114b461144e565b5b5092915050565b5f6114c682611102565b91506114d183611102565b92508282019050808211156114e9576114e861144e565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61155382611102565b91505f82036115655761156461144e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e745f82015250565b5f6115a4602083610ee0565b91506115af82611570565b602082019050919050565b5f6020820190508181035f8301526115d181611598565b905091905056fea2646970667358221220f7a04f305a385482cc404b3d6248c2b9440e08d40335584438f681e32e798aea64736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "all_contract/Liquidator_1.sol",
            "function": "constructor",
            "line": 480,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
