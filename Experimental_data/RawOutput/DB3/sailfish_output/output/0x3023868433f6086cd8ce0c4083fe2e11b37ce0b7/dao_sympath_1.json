{
    "file_name": "dao_symex_path_1.json",
    "from_function": "guess",
    "to_function": "guess",
    "bug_type": "dao",
    "src_node": "\"BlockID: 40\nCall context: \nNone\nENTRY_POINT None\"",
    "dest_node": [
        "\"BlockID: 72\nCall context: \nNone\nTMP_9 := guesses_allowed\nguesses_allowed = guesses_allowed - 1\""
    ],
    "executable_instructions": 61,
    "state_variable": "guesses_allowed",
    "error": "",
    "result": "SAT",
    "execution_details": "# using file ..\/..\/output\/0x3023868433f6086cd8ce0c4083fe2e11b37ce0b7\/dao_symex_path_1.json\n# attack type: range\n# solver type: cvc4\n# block execution bound: 10\n# verbose: #f\n# debug: #f\n# building structs\n# building global scope\n  > loading global blocks\n    > adding global block: 0x3@__GLOBAL__\n    > adding global block: 0x4@__GLOBAL__\n    > adding global block: 0x5@__GLOBAL__\n    > adding global block: 0x6@__GLOBAL__\n    > adding global block: 0xc@__GLOBAL__\n    > adding global block: 0xd@__GLOBAL__\n    > adding global block: 0xe@__GLOBAL__\n  > start adding and initializing global variables\n    > declaring global variable: block\n    > initializing global variable: block\n    > declaring global variable: msg\n    > initializing global variable: msg\n\n    > declaring global variable: now\n    > initializing global variable: now\n    > declaring global variable: tx\n    > initializing global variable: tx\n    > declaring global variable: this\n    > initializing global variable: this\n\n    > declaring global variable: msg_sender\n    > initializing global variable: msg_sender\n\n    > declaring global variable: addmod\n    > initializing global variable: addmod\n    > declaring global variable: mulmod\n    > initializing global variable: mulmod\n    > declaring global variable: keccak\n    > initializing global variable: keccak\n    > declaring global variable: sha256\n    > initializing global variable: sha256\n    > declaring global variable: sha3\n    > initializing global variable: sha3\n    > declaring global variable: ripemd160\n    > initializing global variable: ripemd160\n    > declaring global variable: ecrecover\n    > initializing global variable: ecrecover\n    > declaring global variable: blockhash\n    > initializing global variable: blockhash\n    > declaring global variable: guesses_allowed\n    > initializing global variable: guesses_allowed\n\n    > declaring global variable: answer\n    > initializing global variable: answer\n\n    > declaring global variable: quiz\n    > initializing global variable: quiz\n\n    > declaring global variable: owner\n    > initializing global variable: owner\n\n    > declaring global variable: Alec\n    > initializing global variable: Alec\n# building ranges\n  > start adding range variables\n    > adding: guesses_allowed -> (0x2@__RANGE__ 0x8@__RANGE__ 0xa@__RANGE__)\n  > range entry addresses: (0x8@__RANGE__ 0x2@__RANGE__ 0xa@__RANGE__)\n  > loading range blocks\n    > adding range block: 0x1@__RANGE__\n    > adding range block: 0x2@__RANGE__\n    > adding range block: 0x8@__RANGE__\n    > adding range block: 0x7@__RANGE__\n    > adding range block: 0xa@__RANGE__\n    > adding range block: 0xb@__RANGE__\n    > adding range block: 0x9@__RANGE__\n# building normal scopes\n  > root addr: 0xf\n  > dest addrs: (0x23)\n  > loading normal blocks\n    > adding normal block: 0xf\n    > adding normal block: 0x10\n    > adding normal block: 0x11\n    > adding normal block: 0x13\n    > adding normal block: 0x14\n    > adding normal block: 0x15\n    > adding normal block: 0x16\n    > adding normal block: 0x17\n    > adding normal block: 0x18\n    > adding normal block: 0x19\n    > adding normal block: 0x1a\n    > adding normal block: 0x1c\n    > adding normal block: 0x1d\n    > adding normal block: 0x1e\n    > adding normal block: 0x1f\n    > adding normal block: 0x20\n    > adding normal block: 0x21\n    > adding normal block: 0x22\n    > adding normal block: 0x1b\n    > adding normal block: 0x23\n    > adding normal block: 0x12\n# start interpretation of normal blocks...\n\n# asserts size: 2\n# using solver: #<cvc4>\n# result: #t\n"
}