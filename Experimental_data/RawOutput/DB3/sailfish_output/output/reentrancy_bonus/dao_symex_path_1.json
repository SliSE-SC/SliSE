{
    "file": "reentrancy_bonus.sol",
    "global_structs": [
        {
            "name": "struct_block",
            "fields": {
                "coinbase": [
                    "integer"
                ],
                "difficulty": [
                    "integer"
                ],
                "gaslimit": [
                    "integer"
                ],
                "number": [
                    "integer"
                ],
                "timestamp": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_msg",
            "fields": {
                "data": [
                    "integer"
                ],
                "sender": [
                    "integer"
                ],
                "sig": [
                    "integer"
                ],
                "value": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_tx",
            "fields": {
                "gasprice": [
                    "integer"
                ],
                "origin": [
                    "integer"
                ]
            }
        },
        {
            "name": "struct_this",
            "fields": {
                "balance": [
                    "integer"
                ],
                "address": [
                    "integer"
                ]
            }
        }
    ],
    "global_variables": [
        {
            "name": "block",
            "type": [
                "struct_block"
            ],
            "init": []
        },
        {
            "name": "msg",
            "type": [
                "struct_msg"
            ],
            "init": [
                "0xa"
            ]
        },
        {
            "name": "now",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "tx",
            "type": [
                "struct_tx"
            ],
            "init": []
        },
        {
            "name": "this",
            "type": [
                "struct_this"
            ],
            "init": [
                "0xb"
            ]
        },
        {
            "name": "msg_sender",
            "type": [
                "integer"
            ],
            "init": [
                "0xc"
            ]
        },
        {
            "name": "addmod",
            "type": [
                "function3"
            ],
            "init": []
        },
        {
            "name": "mulmod",
            "type": [
                "function3"
            ],
            "init": []
        },
        {
            "name": "keccak",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "sha256",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "sha3",
            "type": [
                "integer"
            ],
            "init": []
        },
        {
            "name": "ripemd160",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "ecrecover",
            "type": [
                "function4"
            ],
            "init": []
        },
        {
            "name": "blockhash",
            "type": [
                "function1"
            ],
            "init": []
        },
        {
            "name": "userBalances",
            "type": [
                "array",
                "integer",
                "integer"
            ],
            "init": []
        },
        {
            "name": "claimedBonus",
            "type": [
                "array",
                "integer",
                "boolean"
            ],
            "init": []
        },
        {
            "name": "rewardsForA",
            "type": [
                "array",
                "integer",
                "integer"
            ],
            "init": []
        },
        {
            "name": "Reentrancy_bonus",
            "type": [
                "integer"
            ],
            "init": []
        }
    ],
    "global_blocks": [
        {
            "scope": "__GLOBAL__",
            "addr": "0xa",
            "instructions": [
                "msg.sender = 0x6"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xb",
            "instructions": [
                "this.address = 0x5"
            ]
        },
        {
            "scope": "__GLOBAL__",
            "addr": "0xc",
            "instructions": [
                "msg_sender = 0x4"
            ]
        }
    ],
    "range_variables": [
        {
            "name": "rewardsForA",
            "addrs": [
                "0x2",
                "0x3",
                "0x5",
                "0x7"
            ]
        },
        {
            "name": "claimedBonus",
            "addrs": [
                "0x2",
                "0x9"
            ]
        }
    ],
    "range_blocks": [
        {
            "scope": "__RANGE__",
            "addr": "0x1",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x2",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x3",
            "instructions": [
                "CLR_0 = rewardsForA[U]",
                "REF_7 = CLR_0",
                "rewardsForA[0] = 0",
                "rewardsForA[1] = 0",
                "rewardsForA[2] = 0",
                "rewardsForA[3] = 0",
                "rewardsForA[4] = 0",
                "rewardsForA[5] = 0",
                "rewardsForA[6] = 0",
                "rewardsForA[7] = 0",
                "rewardsForA[8] = 0",
                "rewardsForA[9] = 0"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x5",
            "instructions": [
                "CLR_1 = claimedBonus[U]",
                "REF_8 = CLR_1",
                "RTMP_8 = ! REF_8",
                "CONDITION RTMP_8 0x4 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x4",
            "instructions": [
                "CLR_2 = rewardsForA[U]",
                "REF_7 = CLR_2",
                "rewardsForA[0] = 0",
                "rewardsForA[1] = 0",
                "rewardsForA[2] = 0",
                "rewardsForA[3] = 0",
                "rewardsForA[4] = 0",
                "rewardsForA[5] = 0",
                "rewardsForA[6] = 0",
                "rewardsForA[7] = 0",
                "rewardsForA[8] = 0",
                "rewardsForA[9] = 0"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x7",
            "instructions": [
                "CLR_3 = claimedBonus[U]",
                "REF_10 = CLR_3",
                "RTMP_10 = ! REF_10",
                "CONDITION RTMP_10 0x6 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x6",
            "instructions": [
                "CLR_4 = rewardsForA[U]",
                "REF_9 = CLR_4",
                "TMP_9 = REF_9 + 100",
                "rewardsForA[0] = TMP_9",
                "rewardsForA[1] = TMP_9",
                "rewardsForA[2] = TMP_9",
                "rewardsForA[3] = TMP_9",
                "rewardsForA[4] = TMP_9",
                "rewardsForA[5] = TMP_9",
                "rewardsForA[6] = TMP_9",
                "rewardsForA[7] = TMP_9",
                "rewardsForA[8] = TMP_9",
                "rewardsForA[9] = TMP_9"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x9",
            "instructions": [
                "CLR_5 = claimedBonus[U]",
                "REF_12 = CLR_5",
                "RTMP_11 = ! REF_12",
                "CONDITION RTMP_11 0x8 0x1"
            ]
        },
        {
            "scope": "__RANGE__",
            "addr": "0x8",
            "instructions": [
                "CLR_6 = claimedBonus[U]",
                "REF_11 = CLR_6",
                "claimedBonus[0] = true",
                "claimedBonus[1] = true",
                "claimedBonus[2] = true",
                "claimedBonus[3] = true",
                "claimedBonus[4] = true",
                "claimedBonus[5] = true",
                "claimedBonus[6] = true",
                "claimedBonus[7] = true",
                "claimedBonus[8] = true",
                "claimedBonus[9] = true"
            ]
        }
    ],
    "root_addr": "0xd",
    "dest_addrs": [
        "0x1a"
    ],
    "normal_blocks": [
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0xd",
            "instructions": [
                "NOP",
                "recipient = NEW_VAL integer",
                "recipient = NEW_VAL integer",
                "amountToWithdraw = NEW_VAL integer",
                "JUMP 0xe"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0xe",
            "instructions": [
                "CLR_7 = claimedBonus[recipient]",
                "REF_4 = CLR_7",
                "TMP_3 = ! REF_4",
                "CONDITION TMP_3 0xe_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0xe_r0",
            "instructions": [
                "JUMP 0xf"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0x10",
            "instructions": [
                "NOP",
                "JUMP 0x11"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0x11",
            "instructions": [
                "CLR_8 = rewardsForA[recipient]",
                "REF_0 = CLR_8",
                "amountToWithdraw = REF_0",
                "CLR_9 = rewardsForA[recipient]",
                "REF_1 = CLR_9",
                "rewardsForA[recipient] = 0",
                "NOP",
                "ATTACK",
                "TMP_1 = NEW_VAL boolean",
                "JUMP 0x12"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0xf",
            "instructions": [
                "CLR_10 = rewardsForA[recipient]",
                "REF_5 = CLR_10",
                "WRP_0 = REF_5 + 100",
                "rewardsForA[recipient] = WRP_0",
                "recipient = recipient",
                "JUMP 0x10"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x12",
            "instructions": [
                "NOP",
                "recipient = NEW_VAL integer",
                "recipient = NEW_VAL integer",
                "amountToWithdraw = NEW_VAL integer",
                "JUMP 0x13"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x13",
            "instructions": [
                "CLR_11 = claimedBonus[recipient]",
                "REF_4 = CLR_11",
                "TMP_3 = ! REF_4",
                "CONDITION TMP_3 0x13_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x13_r0",
            "instructions": [
                "JUMP 0x14"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x15",
            "instructions": [
                "CLR_12 = claimedBonus[recipient]",
                "REF_6 = CLR_12",
                "claimedBonus[recipient] = true",
                "JUMP 0x16"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x17",
            "instructions": [
                "NOP",
                "JUMP 0x18"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x18",
            "instructions": [
                "CLR_13 = rewardsForA[recipient]",
                "REF_0 = CLR_13",
                "amountToWithdraw = REF_0",
                "CLR_14 = rewardsForA[recipient]",
                "REF_1 = CLR_14",
                "rewardsForA[recipient] = 0",
                "NOP",
                "CLR_15 = this.balance",
                "WRP_1 = CLR_15 - amountToWithdraw",
                "this.balance = WRP_1",
                "TMP_1 = NEW_VAL boolean",
                "JUMP 0x19"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x19",
            "instructions": [
                "success = TMP_1",
                "CONDITION success 0x19_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x19_r0",
            "instructions": [
                "JUMP 0x15"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v2",
            "addr": "0x14",
            "instructions": [
                "CLR_16 = rewardsForA[recipient]",
                "REF_5 = CLR_16",
                "WRP_2 = REF_5 + 100",
                "rewardsForA[recipient] = WRP_2",
                "recipient = recipient",
                "JUMP 0x17"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0x1a",
            "instructions": [
                "CLR_17 = claimedBonus[recipient]",
                "REF_6 = CLR_17",
                "claimedBonus[recipient] = true"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0x16",
            "instructions": [
                "success = TMP_1",
                "CONDITION success 0x16_r0 0xRequireTrap"
            ]
        },
        {
            "scope": "getFirstWithdrawalBonus_v1",
            "addr": "0x16_r0",
            "instructions": [
                "JUMP 0x1a"
            ]
        },
        {
            "scope": "trap",
            "addr": "0x1b",
            "instructions": [
                "NOP"
            ]
        },
        {
            "scope": "RequireTrap",
            "addr": "0xRequireTrap",
            "instructions": [
                "NOP"
            ]
        }
    ]
}