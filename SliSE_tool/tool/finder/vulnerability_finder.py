import logging

import finder
from rattle import SSAFunction
from executor.trace import Trace

logger = logging.getLogger(__name__)

Z3_TIMEOUT = 100


class VulnerabilityFinder(object):
    def __init__(self, traces: [Trace], functions: [SSAFunction], contract_name, srcmap=None, find_all=False):
        if traces is None:
            logger.error("Vulnerability module checker initialized without traces")
            raise Exception
        self._traces: [Trace] = traces
        self._functions: [SSAFunction] = functions
        self._vulns = set()
        self._contract_name = contract_name
        self._srcmap = srcmap
        self._find_all = find_all

    def __change_vuln_function_name(self, vuln):
        for func in self._functions:
            if vuln.analyzed_block.block in func.blocks:
                vuln.function_hash = "0x" + hex(func.hash)[2:].zfill(8)
                if not func.name or func.name == '_fallthrough':
                    # vuln.function_name = hex(func.hash)
                    vuln.function_name = vuln.function_hash
                else:
                    vuln.function_name = func.name
                return

    def __translate_pc_to_line_number(self, vuln):
        if not self._srcmap:
            return
        line_number = self._srcmap.get_line_number(self._contract_name, vuln.instruction_offset)
        if line_number is None:
            return
        self._vulns.discard(vuln)
        vuln.line_number = line_number
        self._vulns.add(vuln)

    def __update_vuln_fields(self):
        for vuln in self._vulns.copy():
            self.__change_vuln_function_name(vuln)
            self.__translate_pc_to_line_number(vuln)

    def __analyse_modules(self, modules_name):
        for vuln_module_key in modules_name:
            try:
                vulns = finder.available_modules[vuln_module_key](self._traces, self._find_all)
            except BaseException:
                logger.exception(f'Exception in {vuln_module_key} module')
                continue
            if vulns:
                self._vulns.update(vulns)
        self.__update_vuln_fields()
        return self._vulns

    def analyse_all_modules(self):
        return self.__analyse_modules(finder.available_modules.keys())

    def analyse_only(self, modules_name):
        return self.__analyse_modules(modules_name)
